version: 2.1
orbs:
  slack: circleci/slack@4.3.0

commands:
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      circle_workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
             aws cloudformation delete --stack-name "udapeople-*-<<parameters.circle_workflow_id>>
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_error
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_error
  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: Front-end Test
          command: |
             cd frontend
             npm install
             npm run test    
  test-backend:
   docker:
       - image: circleci/node:13.8.0
   steps:
      - checkout
      - restore_cache:
         keys: [backend-build]
      - run:
          name: Backend-end Test
          command: |
             cd backend
             npm install
             npm run test
  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: Front-end Scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [backend-build]
      - run:
          name: Backend-end Scan
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install gzip & tar
          command: |
            sudo apt-get install tar
            sudo apt-get install gzip
            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/backend.yml \
           --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
           aws cloudformation deploy \
           --template-file .circleci/files/frontend.yml \
           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
           aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-ba4a221" \
            --output text >> ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]    
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
